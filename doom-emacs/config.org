#+title: Emacs Configuration file


* Basic Configuration
** Username
#+begin_src emacs-lisp :tangle yes
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file te plates and snippets.
(setq user-full-name "Seonjin Lee"
      user-mail-address "sjbase@me.com")
#+end_src
** Auto save and other features
#+begin_src emacs-lisp :tangle yes
(when (eq system-type 'darwin)
  (osx-trash-setup))
(setq delete-by-moving-to-trash t)
;; Raise undo-limit to 80Mb
(setq undo-limit 80000000
      ;; More granular undo
      evil-want-fine-undo t
      auto-save-default t)
;; Show battery status
;; (display-battery-mode 1)
;; (setq display-time-default-load-average nil)
#+end_src
** Coding system
#+begin_src emacs-lisp :tangle yes
(prefer-coding-system       'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src
** Folders
#+begin_src emacs-lisp :tangle yes
(defconst my/config-file "~/Documents/Dev/dotfiles/doom-emacs/config.org")
(defconst my/bibtex-file "~/Documents/Academic/Zotero/zotero-refs.bib")
(defconst my/csl-file "~/Documents/Academic/Zotero/Styles")
(defconst my/pdf-folders '("~/Documents/Academic/Zotero/PDFs"))
(defconst my/org-roam-folder "~/Documents/RoamNotes")
(defconst my/org-roam-folders '("~/Documents/RoamNotes"))
(after! org
  (defconst my/org-folder "~/Documents/OrgDocs/")
  (defconst my/org-agenda-folder '("~/Documents/OrgDocs/Agenda")))
(setq yas-snippet-dirs
      '("~/.doom.d/snippets"))
#+end_src

* UI
** Font Settings
*** Font family and size
#+begin_src emacs-lisp :tangle yes
;; Set font family and size
(setq doom-font (font-spec :family "BlexMono Nerd Font Mono" :size 16 :style "Retina")
      ;; doom-big-font (font-spec :family "FiraCode Nerd Font Mono" :size 26 :style "Retina")
      doom-variable-pitch-font (font-spec :family "ETbb" :size 16 :slant 'normal :weight 'normal))
#+end_src
**
*** Enable bold and italic
#+begin_src emacs-lisp :tangle yes
;; Enable bold and italic font
(setq doom-themes-enable-bold t
      doom-themes-enable-italic t)
#+end_src
** Theme
#+begin_src emacs-lisp :tangle yes
;; Set default theme
(if (display-graphic-p)
    (setq doom-theme 'doom-horizon)
  (setq doom-theme 'doom-horizon))
#+end_src
** Theme change with system appearance
#+begin_src emacs-lisp :tangle yes
(defun apply-system-theme (appearance)
  "Load theme, taking current system APPEARANCE into consideration."
  (mapc #'disable-theme custom-enabled-themes)
  (pcase appearance
    ('light (load-theme 'doom-ayu-light t))
    ('dark (load-theme 'doom-horizon t))))

(add-hook 'ns-system-appearance-change-functions #'apply-system-theme)
#+end_src
**
**  Header line
#+begin_src emacs-lisp :tangle yes
;; "Adds a bar with the same color as the fringe as the header-line.Imitates the look of wordprocessors a bit."
(setq-default header-line-format
    (concat
        (propertize " " 'display (list 'space :width 'left-fringe) 'face 'fringe)
        (propertize " " 'display (list 'space :width 'left-margin) 'face (list (list :height 800) 'default))
        (propertize " " 'display (list 'space :width 'text) 'face (list (list :height 800) 'default))
        ;(propertize (format " %dW" (count-words (point-min) (point-max))) 'face 'default)
        (propertize " " 'display (list 'space :width 'left-margin) 'face (list (list :height 800) 'default))
;;(propertize (format " %dW" (count-words (point-min) (point-max))) 'face 'fringe)
;; '("" mode-line-misc-info)
        (propertize " " 'display (list 'space :width 'left-fringe) 'face 'fringe))) ;
#+end_src
** Reframe pixelwise
#+begin_src emacs-lisp :tangle yes
(setq frame-resize-pixelwise t)
#+end_src
** Line numbers
#+begin_src emacs-lisp :tangle yes
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)
#+end_src
** Splash image
#+begin_src emacs-lisp :tangle yes
;; Set splash image
(setq fancy-splash-image "~/.doom.d/misc/NASA_logo.png")
#+end_src
** Global hl-todo-mode
#+begin_src emacs-lisp :tangle yes
(global-hl-todo-mode 1)
#+end_src
** Window opacity
#+begin_src emacs-lisp :tangle yes
(doom/set-frame-opacity 95)
#+end_src
** Miniframe mode
#+begin_src emacs-lisp :tangle yes
(add-hook! 'special-mode-hook 'mini-frame-mode)
(custom-set-variables
 '(mini-frame-show-parameters
   '((top . 0.6)
     (width . 0.95)
     (left . 0.5))))
#+end_src
** Cursor settings
#+begin_src emacs-lisp :tangle yes
;; Add different colors for VIM state
(setq evil-normal-state-cursor '(box "DodgerBlue2")
      evil-insert-state-cursor '((bar . 3) "SeaGreen3")
      evil-replace-state-cursor '((hbar . 2) "firebrick2")
      ;; evil-motion-state-cursor '(bar "medium sea green")
      evil-visual-state-cursor '(hollow "orange"))
#+end_src
** Modeline Configuration
*** Remove UTF-8
#+begin_src emacs-lisp :tangle yes
;;Modeline remove utf-8
(defun doom-modeline-conditional-buffer-encoding ()
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))
(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)
#+end_src
*** Display Time
#+begin_src emacs-lisp :tangle yes
;; Display time on mode-line
(display-time-mode 1)
#+end_src
*** Word count
#+begin_src emacs-lisp :tangle yes
;; If non-nil, a word count will be added to the selection-info modeline segment.
(setq doom-modeline-enable-word-count t)

;; Major modes in which to display word count continuously.
;; Also applies to any derived modes. Respects `doom-modeline-enable-word-count'.
;; If it brings the sluggish issue, disable `doom-modeline-enable-word-count' or
;; remove the modes from `doom-modeline-continuous-word-count-modes'.
(setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
#+end_src
*** Remove system load
#+begin_src emacs-lisp :tangle yes
(setq-default display-time-default-load-average nil)
#+end_src
*** Hide modeline for Pdf mode
#+begin_src emacs-lisp :tangle yes
(add-hook! 'pdf-view-mode-hook 'hide-mode-line-mode)
#+end_src
** Window size
#+begin_src emacs-lisp :tangle yes
(when window-system
  (setq initial-frame-alist
        '((top . 120)
          (left . 50)
          (width . 140)
          (height . 60))))
#+end_src
**
* Language
** Python
*** Exclude .venv from LSP watch
#+begin_src emacs-lisp :tangle yes
;; Exclude .venv from lsp watch
(after! lsp-mode
  (push "[/\\\\]\\.venv$" lsp-file-watch-ignored-directories))
#+end_src
** English
*** Merriam-Webster thesaurus
#+begin_src emacs-lisp :tangle yes
(setq mw-thesaurus--api-key "601c421e-3f91-4a69-b8f9-e941735eab55")
#+end_src
* Org mode
** Org Directory
#+begin_src emacs-lisp :tangle yes
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(after! org
  (setq org-directory my/org-folder
        org-log-done t
        org-log-into-drawer t))
(setq org-agenda-files '("~/Documents/OrgDocs/Agenda"))

#+end_src
** Always show image
#+begin_src emacs-lisp :tangle yes
(setq org-startup-with-inline-images t)
#+end_src
** Auto-tangle Configuration Files
#+begin_src emacs-lisp :tangle yes
;; Automatically tangle our Emacs.org config file when we save it
(defun auto-org-babel-tangle ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name my/config-file))
    ;; Dynamic scoping to the rescue
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'auto-org-babel-tangle)))
#+end_src
** Pretty symbols
#+begin_src emacs-lisp :tangle yes
;; Pretty Symbol    s
(defun org-icons ()
  "Beautify org mode keywords."
  (setq prettify-symbols-alist '(("[ ]" . "☐")
                                 ("[X]" . "☑")
                                 ("[-]" . "■")
                                 ("#+BEGIN_SRC" . "↦")
                                 ("#+END_SRC" . "⇤")
                                 ("#+begin_src" . "↦")
                                 ("#+end_src" . "⇤")
                                 ("#+title:" . " ")
                                 ("#+TITLE:" . " ")
                                 ("#+BEGIN_EXAMPLE" . "↦")
                                 ("#+END_EXAMPLE" . "⇤")
                                 ("->" . "→")
                                 ("<-" . "←")
                                 ("=>" . "⮕")
                                 ("#+BEGIN_QUOTE" . "↦")
                                 ("#+END_QUOTE" . "⇤")))
  (prettify-symbols-mode))

(add-hook 'org-mode-hook 'org-icons)
#+end_src
** Enable org-mode for txt files
#+begin_src emacs-lisp :tangle yes
;; (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
#+end_src
** Hide emphasis marker
#+begin_src emacs-lisp :tangle yes
;; show actually italicized text instead of /italicized text/
(setq org-hide-emphasis-markers nil
      org-ellipsis "  " ;; folding symbol
      ;; org-pretty-entities t
      ;; org-startup-indented t
      org-agenda-block-separator "")
#+end_src
** No gutter for org
#+begin_src emacs-lisp :tangle yes
(after! git-gutter
  (setq git-gutter:disabled-modes '(org-mode image-mode)))
#+end_src
** Nicer org-mode
#+begin_src emacs-lisp :tangle yes
(defun nicer-org ()
  (progn
    (+org-pretty-mode 1)
    (org-pretty-table-mode 1)
    (abbrev-mode 1)
    ;; (mixed-pitch-mode 1)
    (hl-line-mode -1)
    ;; (display-line-numbers-mode -1)
    (hide-mode-line-mode 1)
    (olivetti-mode 1)
    (org-indent-mode -1)
    ))
(setq save-abbrevs t)
(setq save-abbrevs 'silently)
(setq only-global-abbrevs t)
(setq olivetti-body-width 0.85)
(add-hook! 'org-mode-hook  #'nicer-org)
(add-hook! 'org-mode-hook #'hl-todo-mode)
;; (remove-hook! 'org-mode-hook  'org-superstar-mode)
(remove-hook! 'org-mode-hook  'flycheck-mode)
#+end_src

#+RESULTS:
** Agenda log mode
#+begin_src emacs-lisp :tangle yes
(map! :map org-agenda-mode-map
      :desc "org-agenda-log-mode"
      :leader
      "m l" #'org-agenda-log-mode)
#+end_src

** Remove stars
#+begin_src emacs-lisp :tangle yes
;; (setq org-superstar-headline-bullets-list '(?\s))
;; (setq org-superstar-remove-leading-stars t)
(defun org-mode-remove-stars ()
  (font-lock-add-keywords
   nil
   '(("^\\*+ "
      (0
       (prog1 nil
         (put-text-property (match-beginning 0) (match-end 0)
                            'invisible t)))))))

;; (add-hook! 'org-mode-hook #'org-mode-remove-stars)
#+end_src
** Line spacing
#+begin_src emacs-lisp :tangle yes
(add-hook! 'org-mode-hook (setq-local line-spacing 0.2))
#+end_src
** Custom fonts color
#+begin_src emacs-lisp :tangle yes
(add-hook! 'doom-load-theme-hook
  (after! org
    (set-face-attribute
     'org-document-title nil :foreground (doom-color 'fg))
    (set-face-attribute
     'org-level-1 nil :foreground (doom-color 'fg))
    (set-face-attribute
     'org-level-2 nil :foreground (doom-color 'fg))
    (set-face-attribute
     'org-level-3 nil :foreground (doom-color 'fg))
    (set-face-attribute
     'org-level-4 nil :foreground (doom-color 'fg))
    (set-face-attribute
     'org-ellipsis nil  :foreground (doom-color 'grey)
                        :background (doom-color 'bg))
    (set-face-attribute
     'org-hide nil :background (doom-color 'bg))
    (set-face-attribute
     'org-block nil :background (doom-color 'bg))
    (set-face-attribute
     'org-block-begin-line nil :background (doom-color 'bg))
    (set-face-attribute
     'org-block-end-line nil :background (doom-color 'bg))
    (set-face-attribute
     'org-table nil  :foreground (doom-color 'fg)
                        :background (doom-color 'bg-alt))
    (set-face-attribute
     'org-agenda-date nil :foreground (doom-color 'grey))
    (set-face-attribute
     'org-agenda-date-today nil :foreground (doom-color 'blue))
    (set-face-attribute
     'org-agenda-date-weekend nil :foreground (doom-color 'red))))
#+end_src
** Custom fonts height
#+begin_src emacs-lisp :tangle yes
(custom-set-faces!
  '(tooltip
    :family "FiraCode Nerd Font Mono")
  '(org-level-1
    :height 1.6
    :weight bold)
  '(org-level-2
    :height 1.3
    :weight bold
    :slant italic)
  '(org-level-3
    :height 1.2
    :weight bold)
  '(org-level-4
    :height 1.1
    :weight bold)
  '(org-ellipsis
    :weight normal
    :slant normal)
  '(org-block-begin-line
    :slant italic)
  '(org-block-end-line
    :slant italic)
  '(org-headline-done
    :strike-through nil)
  '(org-agenda-date
    :weight normal)
  '(org-agenda-date-today
    :weight bold
    :slant italic
    :height 1.2)
  '(org-agenda-date-weekend
    :weight normal)
  '(org-document-title
    :weight bold
    :slant italic
    :height 1.9))
 #+end_src
** Custom Todo
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n!)" "|" "DONE(d!)")
          (sequence "IDEA(i)" "LIT(l)" "DATA(c)" "ANAL(a)" "WRITE(w)" "PROOF(o)" "U/R(u@)" "RETURN(j!)" "|" "FIN(f)" "KILL(k)")
          (sequence "NOTE(e)" "|" "ARCH(h)"))
          org-todo-keyword-faces
          '(("TODO"   . "#D95468")
            ("NEXT"  . "#D98E48")
            ("DONE"  . "#008B94")
            ("IDEA"  . "#E27E8D")
            ("LIT"  . "#EBBF83")
            ("DATA"  . "#8BD49C")
            ("ANAL"  . "#33CED8")
            ("WRITE"  . "#5EC4FF")
            ("PROOF"  . "#539AFC")
            ("RETURN" . "#D95468")
            ("U/R" . "#718CA1")
            ("FIN" . "#008B94")
            ("KILL"   . "grey")
            ("NOTE"  . "#5EC4FF")
            ("ARCH"  . "grey"))))

  (setq hl-todo-keyword-faces
        '(("TODO"   . "#D95468")
          ("NEXT"  . "#D98E48")
          ("DONE"  . "#008B94")
          ("IDEA"  . "#E27E8D")
          ("LIT"  . "#EBBF83")
          ("DATA"  . "#8BD49C")
          ("ANAL"  . "#33CED8")
          ("WRITE"  . "#5EC4FF")
          ("PROOF"  . "#539AFC")
          ("RETURN" . "#D95468")
          ("U/R" . "#718CA1")
          ("FIN" . "#008B94")
          ("KILL"   . "grey")
          ("NOTE"  . "#5EC4FF")
          ("ARCH"  . "grey")))
#+end_src
**
** Custom calender view
#+begin_src emacs-lisp :tangle yes
(setq org-agenda-format-date (lambda (date) (concat "\n"
                                                    (make-string (window-width) 9472)
                                                    "\n"
                                                    (org-agenda-format-date-aligned date))))
#+end_src
** Customization
#+begin_src emacs-lisp :tangle yes
;;warn me of any deadlines in next 7 days
;; (setq org-deadline-warning-days 7)
;;don't show tasks as scheduled if they are already shown as a deadline
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
(setq org-agenda-skip-scheduled-if-deadline-is-shown t)
(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done  t)
;;don't give awarning colour to tasks with impending deadlines
;;if they are scheduled to be done
(setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
;;don't show tasks that are scheduled or have deadlines in the
(setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
;;normal todo list
(setq org-agenda-todo-ignore-deadlines (quote all))
(setq org-agenda-todo-ignore-scheduled (quote all))
;;sort tasks in order of when they are due and then by priority
(setq org-agenda-sorting-strategy
      (quote
       ((agenda deadline-up priority-down)
        (todo priority-down category-keep)
        (tags priority-down category-keep)
        (search category-keep))))

;; start from yesterday
(after! org
  (setq org-agenda-start-day "0d"
        org-agenda-span 8
        org-agenda-start-on-weekday nil
        org-agenda-start-with-log-mode t))

;; custom view

(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "EXPRESS: ")))
          (tags-todo "-read-PRIORITY=\"A\""
                        ((org-agenda-skip-function
                         '(org-agenda-skip-entry-if 'nottodo '("NEXT")))
                         (org-agenda-overriding-header "Next: ")))
          (agenda "")
          (tags-todo "-read"
                        ((org-agenda-skip-function
                          '(org-agenda-skip-entry-if 'nottodo '("TODO")))
                         (org-agenda-overriding-header "TODO items: ")))
          (tags-todo "research"
                       ((org-agenda-skip-function
                          '(org-agenda-skip-entry-if 'todo '("FIN" "U/R")))
                          (org-agenda-overriding-header "On-going research: ")))
          (todo "U/R" ((org-agenda-overriding-header "Articles under review: "))))
         ((org-agenda-compact-blocks t)))))
#+end_src

** Org Restart
#+begin_src emacs-lisp :tangle yes
(map! :map org-mode-map
      :desc "Restart org-mode"
      :leader
      "m R" #'org-mode-restart)
#+end_src
* Org noter

#+begin_src emacs-lisp :tangle yes
(setq org-noter-always-create-frame nil
      org-noter-hide-other nil
      org-noter-notes-search-path '("~/Documents/RoamNotes/annotations"))

(map! :map org-mode-map
      :desc "Insert linked note"
      "C-c l" #'org-noter-insert-note
      :leader
      "m n" #'org-noter
      "t p" #'org-noter-set-hide-other)

(map! :map org-noter-doc-mode-map
      :desc "Insert linked note"
      :n "l" #'org-noter-insert-note
      :desc "Insert linked note"
      "C-c l" #'org-noter-insert-note
      :leader
      "m n" #'org-noter
      "t p" #'org-noter-set-hide-other)
#+end_src
* Org-roam
** Basic configs
#+begin_src emacs-lisp :tangle yes
(setq org-roam-directory my/org-roam-folder)
(setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
(setq +org-roam-open-buffer-on-find-file nil)
#+end_src
** Hotter buffer
#+begin_src emacs-lisp :tangle yes
;; https://github.com/sunnyhasija/Academic-Doom-Emacs-Config/blob/master/config.org
(defun org-roam-buffer-setup ()
  "Function to make org-roam-buffer more pretty."
  (progn
    ;; (setq-local olivetti-body-width 44)
    ;; (mixed-pitch-mode 1)
    ;; (olivetti-mode 1)
    ;; (centaur-tabs-local-mode -1)

  (set-face-background 'magit-section-highlight (face-background 'default))))

(after! org-roam
  (add-hook! 'org-roam-mode-hook #'org-roam-buffer-setup))
#+end_src
** Org-roam UI
#+begin_src emacs-lisp :tangle yes
(map! :leader
      "n r u" #'org-roam-ui-mode)
#+end_src
** Org-roam immediate insert node
#+begin_src emacs-lisp :tangle yes
;; https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/
(defun org-roam-node-insert-immediate (arg &rest args)
  (interactive "P")
  (let ((args (cons arg args))
        (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                  '(:immediate-finish t)))))
    (apply #'org-roam-node-insert args)))
#+end_src

** Bibtex-completion
#+begin_src emacs-lisp :tangle yes
(setq bibtex-completion-bibliography my/bibtex-file
      bibtex-completion-library-path my/pdf-folders
      bibtex-completion-pdf-field "file"
      bibtex-completion-notes-path "~/Documents/RoamNotes/annotations")
;; (add-hook! 'org-mode-hook #'org-roam-bibtex-mode)
(advice-add 'bibtex-completion-candidates
            :filter-return 'reverse)
#+end_src
** Org-roam-bibtex link to org noter
#+begin_src emacs-lisp :tangle yes
(setq org-roam-capture-templates
      '(("d" "default" plain "%?"
         :target (file+head "%<%y%m%d-%H%M>-${slug}.org"
                            "#+title: ${title}\n")
         :unnarrowed t)
        ("a" "Annotation" plain "%?"
         :target (file+head "annotations/%<%y%m%d-%H%M>-${citekey}.org"
                            "#+title: ${author-or-editor-abbrev} (${date})  ${title}\n* Notes\n:PROPERTIES:\n:NOTER_DOCUMENT: ${file}\n:END:\n")
         :unnarrowed t)
        ("A" "Annotation, without prompt" plain "%?"
         :target (file+head "annotations/%<%y%m%d-%H%M>-${citekey}.org"
                            "#+title: ${author-or-editor-abbrev} (${date})  ${title}\n* Notes\n:PROPERTIES:\n:NOTER_DOCUMENT: ${file}\n:END:\n")
         :immediate-finish t)
        ("c" "Concept" plain "%?"
         :target (file+head "concepts/%<%y%m%d-%H%M>-${slug}.org"
                            "#+title: ${title}\n\n")
         :unnarrowed t)
        ("C" "Concept, without prompt" plain "%?"
         :target (file+head "concepts/%<%y%m%d-%H%M>-${slug}.org"
                            "#+title: ${title}\n\n")
         :immediate-finish t)
        ("m" "Method" plain "%?"
         :target (file+head "methods/%<%y%m%d-%H%M>-${slug}.org"
                            "#+title: ${title}\n\n")
         :unnarrowed t)
        ("M" "Method, without prompt" plain "%?"
         :target (file+head "methods/%<%y%m%d-%H%M>-${slug}.org"
                            "#+title: ${title}\n\n")
         :immediate-finish t)
        ("t" "Theory" plain "%?"
         :target (file+head "theories/%<%y%m%d-%H%M>-${slug}.org"
                            "#+title: ${title}\n\n")
         :unnarrowed t)
        ("T" "Theory, without prompt" plain "%?"
         :target (file+head "theories/%<%y%m%d-%H%M>-${slug}.org"
                            "#+title: ${title}\n\n")
         :immediate-finish t)
        ))
#+end_src
*** Citar
#+begin_src emacs-lisp :tangle yes
(setq citar-bibliography my/bibtex-file
      citar-library-paths my/pdf-folders
      citar-file-extensions '("pdf" "org" "md")
      citar-file-open-function #'find-file
      citar-default-action #'citar-open-library-file)
(setq citar-open-note-function 'orb-citar-edit-note
      citar-notes-paths '("~/Documents/RoamNotes/")
      orb-file-field-extensions '("pdf"))
(setq citar-symbol-separator "  ")
(setq citar-templates
      '((main . "${author editor:20}     ${date year issued:4}     ${title:40}")
        (suffix . " ${=key= id:15}    ${tags keywords:*}")
        (preview . " ${=type=:12}    ${tags keywords:*}")
        (note . "Notes on ${author editor}, ${title}")))
#+end_src
** Citar keybinding
#+begin_src emacs-lisp :tangle yes
(map! :map org-mode-map
      :desc "Insert node"
      "C-c n" #'org-roam-node-insert
      :desc "Insert node immediately"
      "C-c i" #'org-roam-node-insert-immediate
      :desc "Insert citation"
      "C-c c" #'org-cite-insert
      :desc "Insert ORB node"
      "C-c a" #'orb-insert-link
      :leader
      :desc "Search citation"
      "s c" #'citar-open-library-file
      :desc "Search ORB node"
      "s C" #'org-roam-ref-find
      :desc "Seach code"
      "s n" #'org-roam-node-find)
#+end_src
*** Zotero integration
#+begin_src emacs-lisp :tangle yes
(setq org-cite-csl-styles-dir "~/Documents/Academic/Zotero/styles")
#+end_src

* Custom Functions
** Center cursor
#+begin_src emacs-lisp :tangle yes
(define-minor-mode scroll-center-cursor-mode
  "Toggle centred cursor scrolling behavior"
  :init-value nil
  :lighter " S="
  :global nil
  (if scroll-center-cursor-mode
      (setq-local scroll-margin (* (frame-height) 2)
                  scroll-conservatively 0
                  maximum-scroll-margin 0.5)
    (dolist (local '(scroll-preserve-screen-position
                     scroll-conservatively
                     maximum-scroll-margin
                     scroll-margin))
      (kill-local-variable `,local)))
  )
#+end_src
** Auto-capitalize
#+begin_src emacs-lisp :tangle yes
(load! "misc/auto-capitalize")
(setq auto-capitalize-words `("I" "English"))
;; (add-hook 'org-mode-hook 'auto-capitalize-mode)
#+end_src
* Dired
#+begin_src emacs-lisp :tangle yes
(map! :map dired-mode-map
      :n "h" #'dired-up-directory
      :n "l" #'dired-view-file)
(map! :leader
      "o j" #'dired-jump
      "f n" #'dired-create-empty-file)
(after! dired
(setq dired-listing-switches "--group-directories-first -gaGh1v"))
#+end_src
* TODO Deft
#+begin_src emacs-lisp :tangle yes
(setq deft-extensions '("txt" "org")
      deft-recursive t
      deft-auto-save-interval -1.0
      deft-directory my/org-roam-folder)
#+end_src
* Emacs everywhere
#+begin_src emacs-lisp :tangle yes
;; (map! :map emacs-everywhere-mode-map
;;       :leader
;;       :desc "Finish Everywhere"
;;       "m s" #'emacs-everywhere-finish
;;       :desc "Abort Everywhere"
;;       "f d" #'emacs-everywhere-abort)
#+end_src
* Keybindings
** evil-easy-motion
*** Default keybinding
#+begin_src emacs-lisp :tangle yes
(evilem-default-keybindings "SPC")
#+end_src
*** evil-snipe for visible
#+begin_src emacs-lisp :tangle yes
(setq evil-snipe-scope 'visible)
#+end_src
** find and replace
#+begin_src emacs-lisp :tangle yes
(map! :desc "Replace string"
      "C-c r" #'replace-string
      :leader
      :desc "Toggle org heading"
      "m h" #'org-toggle-heading)

#+end_src
** Toggle org-indent
#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "Org-mode indent"
      "t i" #'org-indent-mode)
#+end_src
** Toggle company-mode
#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "Company autocompletion"
      "t c" #'company-mode)
#+end_src
** Toggle auto-capitalize-mode
#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "Auto capitalize"
      "t C" #'auto-capitalize-mode)
#+end_src
** Toggle abbrev-mode
#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "Abbrev-mode"
      "t a" #'abbrev-mode)
#+end_src
** Toggle scroll-center-cursor-mode
#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "Scroll center cursor"
      "t s" #'scroll-center-cursor-mode)
#+end_src
** Toggle git-gutter-mode
#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "Git gutter visual"
      "t G" #'git-gutter-mode)
#+end_src

** Toggle mode-line
#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "Mode-line"
      "t m" #'hide-mode-line-mode)
#+end_src

** Magit
#+begin_src emacs-lisp :tangle yes
(map! :leader
      :desc "Magit push"
      "g p" #'magit-push
      :desc "Magit commit"
      "g C" #'magit-commit)
#+end_src
** MW-Thesaurus
#+begin_src emacs-lisp :tangle yes
(map! :desc "M&W Thesaurus at point"
      "C-c t" #'mw-thesaurus-lookup-at-point
      :leader
      :desc "M&W Thesaurus"
      "s t" #'mw-thesaurus-lookup)
#+end_src
** Sysaurus
#+begin_src emacs-lisp :tangle yes
(map! :desc "Find synonym and replace"
      "C-c S" #'synosaurus-choose-and-replace
      :desc "Find synonym and insert"
      "C-c s" #'synosaurus-choose-and-insert
      :leader
      :desc "Wordnet"
      "s w" #'synosaurus-lookup)
#+end_src

** PDF-Tools
#+begin_src emacs-lisp :tangle yes
;; ;; Highlight selected
;; (map! :map pdf-view-mode-map
;;       :leader
;;       :desc "Highlight selected"
;;       "m h" #'pdf-annot-add-highlight-markup-annotation
;;       ;; Delete annotation
;;       "m H" #'pdf-annot-delete
;;       ;; Revert
;;       "m r" #'pdf-view-revert-buffer)
#+end_src
** Abbrev define
#+begin_src emacs-lisp :tangle yes
(map! :map org-mode-map
      :desc "Add abbreviation for word"
      "C-c w" #'add-global-abbrev
      :desc "Add expansion for abbrev"
      "C-c W" #'inverse-add-global-abbrev)
#+end_src
