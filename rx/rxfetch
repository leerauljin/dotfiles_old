#!/usr/bin/env bash

#colors
#bold="(tput bold)"
magenta="\033[1;35m"
green="\033[1;32m"
white="\033[1;37m"
blue="\033[1;34m"
red="\033[1;31m"
black="\033[1;40;30m"
yellow="\033[1;33m"
cyan="\033[1;36m"
reset="\033[0m"
bgyellow="\033[1;43;33m"
bgwhite="\033[1;47;37m"
c0=${reset}
c1=${magenta}
c2=${green}
c3=${white}
c4=${blue}
c5=${red}
c6=${yellow}
c7=${cyan}
c8=${black}
c9=${bgyellow}
c10=${bgwhite}

os=$(uname -s)

# Setup fonts
setup_fonts() {
	if [ "$os" != Android ]; then
		if ! fc-match :family='Material' | grep -Eq '^Material.ttf'; then
			mkdir -p "$HOME/.local/share/fonts"
			cp ttf-material-design-icons/* "$HOME/.local/share/fonts"
			fc-cache -vf &>/dev/null
		fi
	fi
}

# Get the init
get_init() {
	if [ "$os" = "Android" ]; then
		echo 'init.rc'
	elif [ "$os" = "Darwin" ]; then
		echo 'launchd'
	elif pidof -q systemd; then
		echo 'systemd'
	elif [ -f '/sbin/openrc' ]; then
		echo 'openrc'
	else
		cut -d ' ' -f 1 /proc/1/comm
	fi
}

# Get count of packages installed
get_pkg_count() {
	package_managers=('xbps-install' 'apk' 'apt' 'pacman' 'nix' 'dnf' 'rpm' 'emerge')
	for package_manager in "${package_managers[@]}"; do
		if command -v "$package_manager" 2>/dev/null >&2; then
			case "$package_manager" in
			xbps-install) xbps-query -l | wc -l ;;
			apk) apk search | wc -l ;;
			apt) echo $(($(apt list --installed 2>/dev/null | wc -l) - 1)) ;;
			pacman) pacman -Q | wc -l ;;
			nix) nix-env -qa --installed '*' | wc -l ;;
			dnf) dnf list installed | wc -l ;;
			rpm) rpm -qa | wc -l ;;
			emerge) qlist -I | wc -l ;;
			esac

			# if a package manager is found return from the function
			return
		fi
	done
	echo 0
}

# Get count of snaps installed
get_snap_count() {
	if command -v snap 2>/dev/null >&2; then
		count=$(snap list | wc -l)

		# snap list shows a header line
		echo $((count - 1))

		return
	fi

	echo 0
}

# Get count of flatpaks installed
get_flatpak_count() {
	if command -v flatpak 2>/dev/null >&2; then
		flatpak list | wc -l
		return
	fi

	echo 0
}

# Get package information formatted
get_package_info() {
	if [[ $(which -s brew) != "brew not found" ]] ; then
		echo "$(brew list -1 --formulae | wc -l) + $(brew list -1 --cask | wc -l)" | bc
		return
	fi

	pkg_count=$(get_pkg_count)
	snap_count=$(get_snap_count)
	flatpak_count=$(get_flatpak_count)

	if [ "$pkg_count" -ne 0 ]; then
		echo -n "$pkg_count"
		if [ "$snap_count" -ne 0 ]; then
			echo -n " ($snap_count snaps"
			if [ "$flatpak_count" -ne 0 ]; then
				echo ", $flatpak_count flatpaks)"
			else
				echo ")"
			fi
		elif [ "$flatpak_count" -ne 0 ]; then
			echo " ($flatpak_count flatpaks)"
		else
			echo ""
		fi
	elif [ "$snap_count" -ne 0 ]; then
		echo -n "$snap_count snaps"

		if [ "$flatpak_count" -ne 0 ]; then
			echo ", $flatpak_count flatpaks"
		else
			echo ""
		fi
	elif [ "$flatpak_count" -ne 0 ]; then
		echo "$flatpak_count flatpaks"
	else
		echo "Unknown"
	fi
}

# Get distro name
get_distro_name() {
	if [ "$os" = "Android" ]; then
		echo 'Android'
	elif [ "$os" = "Darwin" ]; then
		echo "MacOS" $(sw_vers -productVersion)
	else
		awk -F '"' '/PRETTY_NAME/ { print $2 }' /etc/os-release
	fi
}

# Get root partition space used
get_storage_info() {
	if [ "$os" = Android ]; then
		_MOUNTED_ON="/data"
		_GREP_ONE_ROW="$(df -h | grep ${_MOUNTED_ON})"
		_SIZE="$(echo "${_GREP_ONE_ROW}" | awk '{print $2}')"
		_USED="$(echo "${_GREP_ONE_ROW}" | awk '{print $3}')"
		echo "$(head -n1 <<<"${_USED}")B / $(head -n1 <<<"${_SIZE}")B"
	elif [ "$os" = "Darwin" ]; then
		df -h | head -n 2 | tail -n 1 | awk '{ print $3" / "$2 }'
	else
		df -h --output=used,size / | awk 'NR == 2 { print $1" / "$2 }'
	fi
}

free_command_mac() {
	_TOTALMEM=$(echo "$(sysctl hw.memsize | awk '{print $2}') / 1024 / 1024" | bc)
	_FREEMEM=$(echo "$(vm_stat | head -n 1 | awk '{print $8}') * $(vm_stat | head -n 2 | tail -n 1 |  awk '{print $3}' | sed 's/[^0-9]*//g') / 1024 / 1024" | bc)
	_USEDMEM=$(echo "$_TOTALMEM - $_FREEMEM" | bc)
	_TOTALSWAP=$(echo "$(sysctl vm.swapusage | awk '{print $4}' | sed 's/[^0-9\.]*//g') * 1024" | bc)
	_USEDSWAP=$(echo "$(sysctl vm.swapusage | awk '{print $7}' | sed 's/[^0-9\.]*//g') * 1024" | bc)
	_FREESWAP=$(echo "$(sysctl vm.swapusage | awk '{print $10}' | sed 's/[^0-9\.]*//g') * 1024" | bc)
	if [ $(sysctl vm.swapusage | awk '{print $11}') > /dev/null ]; then
		_ENCRYPT=$(sysctl vm.swapusage | awk '{print $11}')
	fi
	printf "   $(printf "XXX: total used free\nMem: $_TOTALMEM $_USEDMEM $_FREEMEM\nNULL\nSwap: $_TOTALSWAP $_USEDSWAP $_FREESWAP $_ENCRYPT\n" | column -t | sed -e '1!b' -e 's/^[^:]*:/ /g')\n"
}

# Get Memory usage
get_mem() {
	if [ "$os" = "Darwin" ]; then
		echo $(free_command_mac | awk 'NR == 2 { print $3" / "$2" MB" }')
	else
		echo $(free --mega | awk 'NR == 2 { print $3" / "$2" MB" }')
	fi
}

# Get uptime
get_uptime() {
	if [ "$os" = "Darwin" ]; then
		uptime | sed 's/.*up//' | sed 's/, load averages: .*//'
	else
		uptime -p | sed 's/up//'
	fi
}

# Get DE/WM
# Reference: https://github.com/unixporn/robbb/blob/master/fetcher.sh
get_de_wm() {
	if [ "$os" = "Darwin" ]; then
        ps_line=$(ps -e | grep -o \
            -e "[S]pectacle" \
            -e "[A]methyst" \
            -e "[k]wm" \
            -e "[c]hun[k]wm" \
            -e "[y]abai" \
            -e "[R]ectangle")

        case $ps_line in
            *chunkwm*)   wm=chunkwm ;;
            *kwm*)       wm=Kwm ;;
            *yabai*)     wm=yabai ;;
            *Amethyst*)  wm=Amethyst ;;
            *Spectacle*) wm=Spectacle ;;
            *Rectangle*) wm=Rectangle ;;
            *)           wm="Quartz Compositor" ;;
        esac
		echo $wm
	else
		wm="${XDG_CURRENT_DESKTOP#*:}"
		[ "$wm" ] || wm="$DESKTOP_SESSION"

		# for most WMs
		[ ! "$wm" ] && [ "$DISPLAY" ] && command -v xprop >/dev/null && {
			id=$(xprop -root -notype _NET_SUPPORTING_WM_CHECK 2>/dev/null)
			id=${id##* }
			wm=$(xprop -id "$id" -notype -len 100 -f _NET_WM_NAME 8t 2>/dev/null | grep '^_NET_WM_NAME' | cut -d\" -f 2)
		}

		# for non-EWMH WMs
		[ ! "$wm" ] || [ "$wm" = "LG3D" ] &&
			wm=$(pgrep -m 1 -o \
				-e "sway" \
				-e "kiwmi" \
				-e "wayfire" \
				-e "sowm" \
				-e "catwm" \
				-e "fvwm" \
				-e "dwm" \
				-e "2bwm" \
				-e "monsterwm" \
				-e "tinywm" \
				-e "xmonad")

		echo "${wm:-unknown}"
	fi
}

echo -e "\n\n"
echo -e "  ┏━━━━━━━━━━━━━━━━━━━━━━┓"
echo -e "  ┃ ${c1}r${c2}x${c7}f${c4}e${c5}t${c6}${c7}c${c1}h${c0}      ${c5}${c0}  ${c6}${c0}  ${c7}${c0} ┃"
echo -e "  ┣━━━━━━━━━━━━━━━━━━━━━━┫"
echo -e "  ┃                      ┃  ${c2}os${c0}      $(get_distro_name) $(uname -m)"
echo -e "  ┃          ${c3}•${c8}_${c3}•${c0}         ┃  ${c7}ker${c0}     $(uname -r)"
echo -e "  ┃          ${c8}${c0}${c9}oo${c0}${c8}|${c0}         ┃  ${c4}pkgs${c0}    $( get_package_info )"
echo -e "  ┃         ${c8}/${c0}${c10} ${c0}${c8}'\'${c0}        ┃  ${c5}sh${c0}      ${SHELL##*/}"
echo -e "  ┃        ${c9}(${c0}${c8}\_;/${c0}${c9})${c0}        ┃  ${c2}wm${c0}      $(get_de_wm)"
echo -e "  ┃                      ┃  ${c6}up${c0}     $(get_uptime)"
echo -e "  ┃    macOS ${c5}${c0} Neovim    ┃  ${c1}ram${c0}     $(get_mem)"
echo -e "  ┃                      ┃  ${c2}disk${c0}    $(get_storage_info)"
echo -e "  ┗━━━━━━━━━━━━━━━━━━━━━━┛  ${c1}━━━${c2}━━━${c3}━━━${c4}━━━${c5}━━━${c6}━━━${c7}━━━"
echo -e "\n\n"
# if [ "$os" != Android ]; then
# 	echo -e "        ${c6}ﳑ  ${c6}${c2}  ${c2}${c4}  ${c4}${c5}  ${c5}${c7}  ${c7}"
# fi
